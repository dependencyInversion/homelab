---

- name: Ensure basic Python & build deps (Debian family)
  ansible.builtin.apt:
    name:
      - python3
      - python3-venv
      - python3-pip
      - python3-setuptools
      - build-essential
      - libffi-dev
      - libssl-dev
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: Try to install bpytop from apt (if available)
  ansible.builtin.apt:
    name: bpytop
    state: present
    update_cache: no
  register: bpytop_apt_install
  ignore_errors: yes
  when: ansible_os_family == "Debian"

- name: Install/upgrade pip packages needed for pip install
  ansible.builtin.pip:
    name:
      - pip
    executable: pip3
    state: latest
  when:
    - ansible_os_family == "Debian"

- name: Install bpytop via pip3 (fallback) if apt didn't install it
  ansible.builtin.pip:
    name: bpytop
    executable: pip3
    state: latest
    extra_args: "--no-cache-dir"
  when:
    - ansible_os_family == "Debian"
    - (bpytop_apt_install is failed) or (bpytop_apt_install is not defined)

- name: Verify bpytop is installed (binary found)
  ansible.builtin.command: "which bpytop"
  register: bpytop_path
  changed_when: false
  failed_when: bpytop_path.rc != 0

- name: Create a small wrapper script in /usr/local/bin for consistency (optional)
  ansible.builtin.copy:
    dest: /usr/local/bin/bpytop-launch
    content: |
      #!/bin/sh
      # Wrapper so Ansible / scripts can call a stable path
      exec /usr/bin/env bpytop "$@"
    mode: "0755"
  when: bpytop_path.rc == 0

- name: Print bpytop version (for debug)
  ansible.builtin.command: bpytop --version
  register: bpytop_ver
  changed_when: false

- name: Show bpytop install info
  ansible.builtin.debug:
    msg:
      - "bpytop binary: {{ bpytop_path.stdout }}"
      - "bpytop version: {{ bpytop_ver.stdout }}"