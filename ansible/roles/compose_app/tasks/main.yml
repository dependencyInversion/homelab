# --- Debian/Ubuntu only ---
- name: Update apt cache if older than 1 hour
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Ensure prerequisites for Docker repo
  ansible.builtin.apt:
    name:
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
    state: present
    update_cache: yes
    cache_valid_time: 3600
  when: ansible_os_family == "Debian"

- name: Ensure /etc/apt/keyrings exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: "0755"
  when: ansible_os_family == "Debian"

- name: Download Docker GPG key (ASCII)
  ansible.builtin.get_url:
    url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
    dest: "/etc/apt/keyrings/docker.asc"
    mode: "0644"
  when: ansible_os_family == "Debian"

- name: Convert GPG key to keyring (.gpg)
  ansible.builtin.command:
    cmd: "gpg --dearmor -o /etc/apt/keyrings/docker.gpg /etc/apt/keyrings/docker.asc"
    creates: "/etc/apt/keyrings/docker.gpg"
  when: ansible_os_family == "Debian"

- name: Ensure keyring perms are world-readable
  ansible.builtin.file:
    path: /etc/apt/keyrings/docker.gpg
    mode: "0644"
  when: ansible_os_family == "Debian"

# Raspberry Pi note: map Ansible arch to Docker's apt arch names
- name: Map architecture for Docker repo
  ansible.builtin.set_fact:
    docker_apt_arch: >-
      {{ 'arm64' if ansible_architecture in ['aarch64','arm64'] else
         'armhf' if ansible_architecture in ['armv7l','armhf'] else
         'amd64' if ansible_architecture in ['x86_64','amd64'] else
         ansible_architecture }}
  when: ansible_os_family == "Debian"

- name: Add Docker apt repository
  ansible.builtin.copy:
    dest: /etc/apt/sources.list.d/docker.list
    mode: "0644"
    content: |
      deb [arch={{ docker_apt_arch }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
  when: ansible_os_family == "Debian"

- name: Install Docker engine, CLI, containerd, buildx and compose plugin
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

# For RHEL-like, you could add tasks to enable docker-ce repo and install the same package names.

- name: Ensure docker service is enabled and running
  ansible.builtin.service:
    name: docker
    state: started
    enabled: yes

- name: Add user to docker group (no sudo for compose)
  ansible.builtin.user:
    name: "{{ compose_run_user }}"
    groups: docker
    append: yes

- include_tasks: bpytop.yml

- name: Create app directory
  ansible.builtin.file:
    path: "{{ compose_app_dir }}"
    state: directory
    owner: "{{ compose_run_user }}"
    group: "{{ compose_run_group }}"
    mode: "0755"

- name: Clone / update the compose repo
  ansible.builtin.git:
    repo: "{{ compose_repo_url }}"
    dest: "{{ compose_app_dir }}"
    version: "{{ compose_repo_version }}"
    force: yes
    update: yes
  register: repo_sync

- name: Ensure optional .env file
  when: compose_env_file | length > 0
  ansible.builtin.copy:
    dest: "{{ compose_app_dir }}/{{ compose_env_file }}"
    content: |
      {% for k, v in compose_env_vars.items() %}
      {{ k }}={{ v }}
      {% endfor %}
    owner: "{{ compose_run_user }}"
    group: "{{ compose_run_group }}"
    mode: "0640"

- name: Install systemd unit for the compose app
  ansible.builtin.template:
    src: compose-app.service.j2
    dest: "/etc/systemd/system/{{ compose_service_name }}.service"
    mode: "0644"
  register: unit_file

- name: systemd daemon-reload
  ansible.builtin.systemd:
    daemon_reload: yes
  when: unit_file.changed

- name: Enable service (start at boot)
  ansible.builtin.service:
    name: "{{ compose_service_name }}"
    enabled: yes

- name: Start or restart service when repo or unit changed
  ansible.builtin.service:
    name: "{{ compose_service_name }}"
    state: restarted
  when: repo_sync.after is defined and (repo_sync.after != repo_sync.before or unit_file.changed)
